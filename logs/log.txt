2023/05/12
とりあえずどうするか決める

だいたい固まった
次に具体的な動作を考える
だいたい出たが，1文字が3文字に変換されるのは多いので圧縮したいところ
文字数を定めない変換はできるか？
難しそう
元の文字列としては46文字までならツイートできる
    変換先を「ガ, ァ, ギ, ャ, ッ」の5文字にする，
    前から2文字づつ確認して前と後ろが同じであれば「ー」に変換する
    例：ギャギャガァガァ -> ギャーガァー
これなら短くなりそう
しかし，そもそも変換先が8文字ならひらがなの変換はどうにかなる

2023/05/13
とりあえずどうするか決める２

変換先を「ガ, ァ, ギ, ャ」の4文字にする，
でやってみる4*4*4 = 64あるのでできるはず
二つ形式が考えられるが，ひらがなで入力しておくとバグるかもしれないので使わない方で
何よりファイルが1つで済む
流れを追加
じゃあ作ってみる

2023/05/17
作成してみる

今日は，jsonファイルを生成するプログラムを生成する
create_conversion_list.jsを生成
とりあえずかなを追加
''は変なことになるかもしれないので""に変換

2023/05/18
作成２

引き続きjsonファイルの生成
ブランチを切っていなかったのでここで切る
変換先の指定...ok
    全ての変換先を配列に保存する
    ランダムな値で配列から取り出す
    配列から変換先を削除する
という流れで行う
次は，jsonファイルに保管...ok
次は，変換する関数を作成

2023/05/22
作成３

変換対象を少し考え直してみる
今のところ変換先は[ガ, ァ, ギ, ャ]であるが，
例として出力した時にそれほど短縮できそうな部分が見つからなかった．
これでは余り面白くない(しゃべってるように見えない)為，変換先を
[ガ, ァ, ギ, ャ, グ, ゥ, ー, ッ]として2文字に変換するようにしてみる
8*8 = 64文字まで指定できる後は見た目がいいかどうか
今の奴に追加でやってみる
 - conversion_list_8.jsonを生成する...ok
こちらの方がよさそう

次は，漢字->ひらがな変換
と，思ったがそもそも実装しないでおく
読みが正しいかどうかの問題もあるが，元に戻せないため
やるならhttps://developer.yahoo.co.jp/webapi/jlp/furigana/v2/furigana.html
がよさそう

よって次はカタカナ->ひらがな変換
変換対象に「ー」を入れておく(カタカナの変換を含めるため)
今さらブランチを変更するスタイル
 - main.txtも変更しておく...ok
 - カタカナ->ひらがな...ok
カタカナに0x60を引くことで相互変換できるらしいへぇ
https://qiita.com/mimoe/items/855c112625d39b066c9a
関数的にほぼほぼ一緒なので引数を追加して相互変換できるようにする
というかそういう関数を追加する
Kana_To_Komeの相互変換は別物になるので分離
よく考えたら相互変換する必要がなかった(カタカナを元に戻せないので)

次は濁点, 半濁点を分離
jsonファイルを用意するのが一番速そう
行けるじゃねぇかあほ
normalize('NFD')で濁点半濁点を分離できる
https://qiita.com/jkr_2255/items/e0c039c438d3ebfd1a6a

 - 全てを実行する関数を作る...ok
normalizeで変換した濁点が違う文字コードになっているちくせう
変換するか別のを作るか
変換で

2023/05/23
作成４

とりあえず文字コードに+2すれば求める濁点半濁点にはなる
とりあえず追加の方向でやってみる
toString(16)で16進数で表示されるらしい
normalizeで出力される濁点半濁点の文字コード, 濁点 = 3099, 半濁点 = 309a
右上に存在する濁点半濁点は大きさ0の文字だった，つまり重ねて表示される
例：う゚
文字列がそのまま入力されるので濁点半濁点の部分は例外処理にする
完了

2023/05/24
作成５

最初の文字が[ァ, ャ, ゥ, ー, ッ]の時手前に[ガ, ギ, グ]のどちらかを追加するようにしてみる
戻すときは先頭から数えて[ガ, ァ, ギ, ャ, グ, ゥ, ー, ッ]のいずれか以外が見つかった時，
その位置が奇数か偶数で先頭を消すか判別する
変換できない奴は「ごめん！よくわかんなかった！」とか表示するか
いろいろエラーメッセージを用意しておこう
翻訳できない文字はそのまま出力することを書いておこう
主要な記号は追加しておいて，翻訳できない文字があった時だけエラーメッセージを表示する
ただ，その文字を無視した翻訳は表示する
searchで/[ガ,ギ,グ,ァ,ャ,ゥ,ー,ッ]/から発見し，その手前に追加する
完了

2023/05/26
作成６

コメ語 -> 日本語を作成しよう
テキストから[ガ, ァ, ギ, ャ, グ, ゥ, ー, ッ]以外をすべて削除し，
その文字数を数えることで奇数偶数を判定する

2023/05/28
作成７

続き，
わざわざforで回してたが意味ないなlenで取れ
完了

2023/05/31
作成８

コメ語 -> 日本語をやる
1文字削除する関数から
完了
コメ語 -> 日本語する関数...ok
完了
まとめる...ok
次は，見た目を作ってみる
マージすること

2023/06/01
見た目作成

とりあえず必要なものだけ突っ込む
必要そうなものはあらかた突っ込んだ
いろいろと見た目を整えてみた
いろいろとメッセージの表示を変更してみる
画像も載せてみる
どうもおかしい？
flex側の問題だった，そもそもflexが内部の要素を強制的に引き伸ばすようになってるみたい
何とかなった

2023/06/02
見た目作成２

とりあえず見た目はおけい
次は実際に処理を表示する部分を作る

要素制御

jsファイルを追加してやる
必要なものは，
    コメ君への送信
    あなたへの送信
    エラーメッセージの表示
まずコメ君へ
表示はできるようになった
Cannot access 'ex' before initializationが発生
データが残ってないのか？
よくわからないがモジュール化すればいいのか？
分からん，あしたへ

2023/06/05
reactの追加

非常に面倒で問題で解決する方法がよくわからないのでreactで作り直して解決する
(強硬手段)
とりあえずInit
docsフォルダはデプロイ時に使用するので名前を変更
一度コマンドを試してみる
うまくいったらしい，pagesも試しておく
大丈夫そう
うまくいったんでマージ，feat/element_controlもマージ
新しくブランチ切ってreactで再構成する

reactで再構成
cssの掛け方がいまいち分からないので次の自分はうまくやってくれることを祈ります

2023/06/06
reactで再構成２

どうにかしましょう
どうにかなった，どの要素に影響を与えるかというのは重要ですねまる

2023/06/07
reactで再構成３

続き，余計なAAでも追加してやれ
かわいい
AA生成ページ: https://birdwatcheryt.github.io/software/aa/aa.html
順調順調
なんかPascalCaseで書けと怒られたので変更
脆弱性が云々の警告が出ているが無視しても良いとのこと
チャットを追加する部分を追加